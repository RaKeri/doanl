import asyncio
import logging
import os
import re
import uuid
import time
from dataclasses import dataclass
from typing import Optional, List, Dict

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
)
from dotenv import load_dotenv
import yt_dlp


# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
DOWNLOAD_DIR = os.getenv("DOWNLOAD_DIR", "downloads")
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env")

os.makedirs(DOWNLOAD_DIR, exist_ok=True)

logging.basicConfig(
    level=getattr(logging, LOG_LEVEL.upper(), logging.INFO),
    format="%(asctime)s [%(levelname)s] %(message)s",
)
logger = logging.getLogger("universal_media_bot")


# === –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º ===
URL_PATTERNS = {
    "tiktok": re.compile(r"(https?://(?:www\.)?(?:tiktok\.com|vm\.tiktok\.com)/[^\s]+)"),
    "youtube": re.compile(r"(https?://(?:www\.)?(?:youtube\.com|youtu\.be)/[^\s]+)"),
    "instagram": re.compile(r"(https?://(?:www\.)?instagram\.com/[^\s]+)"),
    "vk": re.compile(r"(https?://(?:www\.)?vk\.com/video[^\s]+)"),
    "pinterest": re.compile(r"(https?://(?:www\.)?pinterest\.[^\s]+)"),
}


# === –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö ===
@dataclass
class VideoInfo:
    url: str
    title: str
    formats: List[dict]


# === –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–µ—à —Å—Å—ã–ª–æ–∫ (id ‚Üí url, —Å TTL) ===
URL_CACHE: Dict[str, dict] = {}
CACHE_TTL = 15 * 60  # 15 –º–∏–Ω—É—Ç


async def cleanup_cache() -> None:
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–µ—à–∞."""
    while True:
        now = time.time()
        expired = [k for k, v in URL_CACHE.items() if now - v["time"] > CACHE_TTL]
        for k in expired:
            del URL_CACHE[k]
        await asyncio.sleep(300)  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def detect_platform(url: str) -> str:
    for key in URL_PATTERNS.keys():
        if key in url:
            return key.capitalize()
    return "Unknown"


def extract_url(text: str) -> Optional[str]:
    for pattern in URL_PATTERNS.values():
        m = pattern.search(text)
        if m:
            return m.group(0)
    return None


async def get_video_info(url: str) -> Optional[VideoInfo]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏."""
    ydl_opts = {"quiet": True, "skip_download": True}
    loop = asyncio.get_event_loop()
    try:
        def _extract():
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                return VideoInfo(
                    url=url,
                    title=info.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                    formats=info.get("formats", []),
                )
        return await loop.run_in_executor(None, _extract)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ: {e}")
        return None


async def download_media(url: str, fmt_id: Optional[str], media_type: str) -> Optional[str]:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ/–ø—Ä–µ–≤—å—é."""
    ydl_opts = {
        "quiet": True,
        "no_warnings": True,
        "outtmpl": os.path.join(DOWNLOAD_DIR, "%(title)s.%(ext)s"),
        "noplaylist": True,
        "format": fmt_id or "best",
    }

    if media_type == "audio":
        ydl_opts.update({
            "format": "bestaudio/best",
            "postprocessors": [{
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192",
            }]
        })
    elif media_type == "thumbnail":
        ydl_opts.update({"skip_download": True, "writethumbnail": True})

    loop = asyncio.get_event_loop()
    try:
        def _download():
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=True)
                if media_type == "thumbnail":
                    return ydl.prepare_filename(info).rsplit(".", 1)[0] + ".jpg"
                return ydl.prepare_filename(info)
        return await loop.run_in_executor(None, _download)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None


# === Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def build_type_keyboard(url: str) -> InlineKeyboardMarkup:
    uid = str(uuid.uuid4())[:8]
    URL_CACHE[uid] = {"url": url, "time": time.time()}
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üéû –í–∏–¥–µ–æ", callback_data=f"type|video|{uid}"),
                InlineKeyboardButton(text="üéß –ê—É–¥–∏–æ", callback_data=f"type|audio|{uid}"),
                InlineKeyboardButton(text="üñº –ü—Ä–µ–≤—å—é", callback_data=f"type|thumbnail|{uid}"),
            ]
        ]
    )


def build_quality_keyboard(formats: List[dict], media_type: str, uid: str) -> InlineKeyboardMarkup:
    quality_buttons = []
    for f in formats:
        if f.get("vcodec") != "none" and f.get("ext") == "mp4" and f.get("height"):
            q = f.get("format_id")
            label = f"{f.get('height')}p"
            quality_buttons.append(
                InlineKeyboardButton(text=label, callback_data=f"dl|{media_type}|{q}|{uid}")
            )
    if not quality_buttons:
        quality_buttons.append(
            InlineKeyboardButton(text="–õ—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ", callback_data=f"dl|{media_type}|best|{uid}")
        )
    rows = [quality_buttons[i:i + 3] for i in range(0, len(quality_buttons), 3)]
    return InlineKeyboardMarkup(inline_keyboard=rows)


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
async def cmd_start(msg: Message):
    await msg.answer(
        "üé¨ –Ø –∑–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ –∏ –ø—Ä–µ–≤—å—é –∏–∑ TikTok, YouTube Shorts, Instagram Reels, VK –í–∏–¥–µ–æ –∏ Pinterest.\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É ‚Äî –≤—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –∏ –∫–∞—á–µ—Å—Ç–≤–æ.",
        parse_mode=ParseMode.HTML,
    )


async def handle_link(msg: Message):
    url = extract_url(msg.text or "")
    if not url:
        await msg.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É.")
        return
    platform = detect_platform(url)
    await msg.answer(
        f"üì¶ –ù–∞–π–¥–µ–Ω–æ: <b>{platform}</b>\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏:",
        parse_mode=ParseMode.HTML,
        reply_markup=build_type_keyboard(url),
    )


async def cb_select_type(call: CallbackQuery):
    _, media_type, uid = call.data.split("|", 2)
    entry = URL_CACHE.get(uid)
    if not entry:
        await call.message.edit_text("‚ö†Ô∏è –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
        return
    url = entry["url"]

    await call.message.edit_text("‚è≥ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤...")
    info = await get_video_info(url)
    if not info:
        await call.message.edit_text("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ.")
        return

    kb = build_quality_keyboard(info.formats, media_type, uid)
    await call.message.edit_text(
        f"üé• <b>{info.title}</b>\n–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ:",
        parse_mode=ParseMode.HTML,
        reply_markup=kb,
    )


async def cb_download(call: CallbackQuery):
    _, media_type, fmt_id, uid = call.data.split("|", 3)
    entry = URL_CACHE.get(uid)
    if not entry:
        await call.message.edit_text("‚ö†Ô∏è –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
        return
    url = entry["url"]

    await call.message.edit_text("‚¨áÔ∏è –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")
    path = await download_media(url, fmt_id, media_type)
    if not path or not os.path.exists(path):
        await call.message.edit_text("üö´ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.")
        return

    try:
        file = FSInputFile(path)
        if media_type == "audio":
            await call.message.answer_audio(file)
        elif media_type == "thumbnail":
            await call.message.answer_photo(file)
        else:
            await call.message.answer_video(file)
        await call.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await call.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")
    finally:
        try:
            os.remove(path)
        except Exception:
            pass


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()
    dp.message.register(cmd_start, CommandStart())
    dp.message.register(handle_link)
    dp.callback_query.register(cb_select_type, lambda c: c.data.startswith("type|"))
    dp.callback_query.register(cb_download, lambda c: c.data.startswith("dl|"))

    asyncio.create_task(cleanup_cache())  # —Ñ–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
